'use client';

import { Page } from '@/components/Page';
import { useTonConnect } from '@/hooks/useTonConnect';
import { Button, Card, Input, Spinner, List, Section, Text, Title } from '@telegram-apps/telegram-ui';
import { CHAIN } from '@tonconnect/sdk';
import { useEffect, useState } from 'react';
import { Address } from '@ton/core';
import { useSearchParams } from 'next/navigation';

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ TON –∞–¥—Ä–µ—Å
const isValidTonAddress = (address: string): boolean => {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å Address –∏–∑ @ton/core
    // –≠—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞–¥—Ä–µ—Å–æ–≤ TON
    Address.parse(address);
    return true;
  } catch (e) {
    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ, –∞–¥—Ä–µ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
const formatAddress = (address: string): string => {
  try {
    const parsedAddress = Address.parse(address);
    return parsedAddress.toString();
  } catch (e) {
    return address;
  }
};

const TonWalletPage = () => {
  const searchParams = useSearchParams();
  const { isConnected, connect, disconnect, sendTransaction, userAddress, wallet, network } = useTonConnect();
  const [recipient, setRecipient] = useState('');
  const [amount, setAmount] = useState('');
  const [comment, setComment] = useState('');
  const [loading, setLoading] = useState(false);
  const [txResult, setTxResult] = useState('');
  const [addressError, setAddressError] = useState('');
  const [txDetails, setTxDetails] = useState<any>(null);
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞ (EQ/UQ/raw)
  const [addressType, setAddressType] = useState<string>('');
  
  // –§–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const [isTestMode, setIsTestMode] = useState<boolean>(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ URL
  useEffect(() => {
    const testModeParam = searchParams.get('isTest');
    if (testModeParam === 'true' || testModeParam === '1') {
      setIsTestMode(true);
      console.log('–í–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è');
    }
  }, [searchParams]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ
  useEffect(() => {
    if (!recipient) {
      setAddressError('');
      setAddressType('');
      return;
    }
    
    if (!isValidTonAddress(recipient)) {
      setAddressError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ TON. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ EQ, UQ –∏–ª–∏ raw-–∞–¥—Ä–µ—Å–∞.');
      setAddressType('');
    } else {
      setAddressError('');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      if (recipient.startsWith('EQ')) {
        setAddressType('bounceable (EQ)');
      } else if (recipient.startsWith('UQ')) {
        setAddressType('non-bounceable (UQ)');
      } else {
        setAddressType('raw');
      }
    }
  }, [recipient]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      setTxResult('');
      setTxDetails(null);
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BOC –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formatBoc = (boc: string | undefined): string => {
    if (!boc) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    if (boc.length <= 30) return boc;
    return `${boc.slice(0, 15)}...${boc.slice(-15)}`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ TON
  const handleSend = async () => {
    if (!isConnected && !isTestMode) return;
    if (addressError) return;
    
    const parsedAmount = parseFloat(amount);
    if (isNaN(parsedAmount) || parsedAmount <= 0) {
      setTxResult('–û—à–∏–±–∫–∞: –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      return;
    }
    
    setLoading(true);
    setTxResult('');
    setTxDetails(null);
    
    try {
      // –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
      const result = await sendTransaction({
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—é–±–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        recipient: recipient, 
        amount: parsedAmount,
        
        // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ç—å –∏–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º MAINNET
        network: wallet?.account.chain || CHAIN.MAINNET,
        
        // –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (SDK –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        comment: comment || undefined,
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±–æ—Ç–∞
        returnToBot: true,
        returnMessage: isTestMode 
          ? `–¢–ï–°–¢: –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—É–º–º–∞: ${parsedAmount} TON, –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipient.substring(0, 6)}...${recipient.substring(recipient.length - 6)}`
          : `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°—É–º–º–∞: ${parsedAmount} TON, –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipient.substring(0, 6)}...${recipient.substring(recipient.length - 6)}`,
        
        // –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥
        testMode: isTestMode,
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ)
        // stateInit: undefined, // Base64-encoded stateInit –¥–ª—è –¥–µ–ø–ª–æ—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        // extraCurrency: undefined // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Jetton'–æ–≤ (—Ç–æ–∫–µ–Ω–æ–≤ TON)
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      setTxDetails(result);
      setTxResult(isTestMode ? '–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞!' : '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', e);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      let errorMessage = '';
      
      if (e instanceof Error) {
        if (e.message.includes('User rejected the transaction')) {
          errorMessage = '–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é';
        } else if (e.message.includes('Invalid magic')) {
          errorMessage = '–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.';
        } else if (e.message.includes('not enough balance')) {
          errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏';
        } else if (e.message.includes('Cell overflow')) {
          errorMessage = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ —Ä–∞–∑–º–µ—Ä.';
        } else if (e.message.includes('Invalid address')) {
          errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.';
        } else {
          errorMessage = e.message;
        }
      } else {
        errorMessage = String(e);
      }
      
      setTxResult(`–û—à–∏–±–∫–∞: ${errorMessage}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Page>
      <Section>
        <Title level="2" style={{ textAlign: 'center', margin: '20px 0' }}>
          {isTestMode ? 'TON Wallet –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : 'TON Wallet –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'}
        </Title>
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
        {isTestMode && (
          <Card style={{ 
            padding: 10, 
            marginBottom: 20, 
            backgroundColor: 'rgba(255, 165, 0, 0.1)',
            borderColor: 'rgba(255, 165, 0, 0.5)',
            borderWidth: 1,
            borderStyle: 'solid'
          }}>
            <Text style={{ 
              textAlign: 'center', 
              color: '#ff9800',
              fontWeight: 'bold'
            }}>
              üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - TON –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            </Text>
          </Card>
        )}
        
        {!isConnected && !isTestMode ? (
          <Card style={{ padding: 20 }}>
            <Text style={{ textAlign: 'center', marginBottom: 20 }}>
              –ü–æ–¥–∫–ª—é—á–∏—Ç–µ TON –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            </Text>
            <Button 
              size="l" 
              stretched 
              onClick={connect}
              style={{ marginBottom: 15 }}
            >
              –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
            </Button>
          </Card>
        ) : (
          <List>
            <Section>
              <Card style={{ padding: 20 }}>
                <Text weight="2">–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</Text>
                <Text 
                  style={{ 
                    fontSize: 14, 
                    overflow: 'hidden', 
                    textOverflow: 'ellipsis',
                    marginBottom: 10 
                  }}
                >
                  {userAddress}
                </Text>
                <Text weight="2">–°–µ—Ç—å:</Text>
                <Text style={{ marginBottom: 15 }}>
                  {network === 'mainnet' ? '–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç—å TON' : '–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å TON'}
                </Text>
                <Button 
                  size="m" 
                  onClick={disconnect} 
                  style={{ marginBottom: 20 }}
                >
                  –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
                </Button>
              </Card>
            </Section>
            
            <Section>
              <Card style={{ padding: 20 }}>
                <Text weight="2" style={{ marginBottom: 10 }}>
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å TON
                </Text>
                
                <div style={{ marginBottom: 10 }}>
                  <Text size={14} style={{ marginBottom: 5 }}>–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è</Text>
                  <Input
                    value={recipient}
                    onChange={(e) => setRecipient(e.target.value)}
                  />
                  {addressError && (
                    <Text style={{ 
                      color: 'red', 
                      fontSize: 12,
                      marginTop: 4
                    }}>
                      {addressError}
                    </Text>
                  )}
                  {addressType && !addressError && (
                    <Text style={{ 
                      color: 'green', 
                      fontSize: 12,
                      marginTop: 4
                    }}>
                      –¢–∏–ø –∞–¥—Ä–µ—Å–∞: {addressType}
                    </Text>
                  )}
                </div>
                
                <div style={{ marginBottom: 10 }}>
                  <Text size={14} style={{ marginBottom: 5 }}>–°—É–º–º–∞ TON</Text>
                  <Input
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                  />
                </div>
                
                <div style={{ marginBottom: 15 }}>
                  <Text size={14} style={{ marginBottom: 5 }}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Text>
                  <Input
                    value={comment}
                    onChange={(e) => setComment(e.target.value)}
                  />
                </div>
                
                <Button 
                  size="l" 
                  stretched 
                  disabled={loading || !recipient || !amount || !!addressError} 
                  onClick={handleSend}
                >
                  {loading ? <Spinner size="s" /> : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å TON'}
                </Button>
                
                {txResult && (
                  <div
                    style={{ 
                      marginTop: 15, 
                      padding: 12,
                      borderRadius: 8,
                      background: txResult.includes('–û—à–∏–±–∫–∞') 
                        ? 'rgba(255, 0, 0, 0.1)' 
                        : 'rgba(0, 255, 0, 0.1)'
                    }}
                  >
                    <Text weight="2">
                      {txResult}
                    </Text>
                    
                    {txDetails && (
                      <div style={{ marginTop: 8 }}>
                        <Text size={13} style={{ marginBottom: 4 }}>
                          BOC: {formatBoc(txDetails.boc)}
                        </Text>
                        {txDetails.externalId && (
                          <Text size={13}>
                            ID: {txDetails.externalId}
                          </Text>
                        )}
                      </div>
                    )}
                  </div>
                )}
              </Card>
            </Section>
          </List>
        )}
      </Section>
    </Page>
  );
};

export default TonWalletPage; 